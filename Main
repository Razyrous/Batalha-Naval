const val MENU_PRINCIPAL = 100
const val MENU_DEFINIR_TABULEIRO = 101
const val MENU_DEFINIR_NAVIOS = 102
const val MENU_JOGAR = 103
const val MENU_LER_FICHEIRO = 104
const val MENU_GRAVAR_FICHEIRO = 105
const val SAIR = 106


fun menuPrincipal(): Int {
    println()
    println("""> > Batalha Naval < <
        |
        |1 - Definir Tabuleiro e Navios
        |2 - Jogar
        |3 - Gravar
        |4 - Ler
        |0 - Sair
        |
    """.trimMargin())
    var menuEscolhido: Int?
    do {
        menuEscolhido = readln().toIntOrNull()
        if (menuEscolhido == null || menuEscolhido >= 6 || menuEscolhido < -1) {
            println("!!! Opcao invalida, tente novamente")
        }
    } while (menuEscolhido == null || menuEscolhido >= 5 || menuEscolhido < -1)

    when (menuEscolhido) {
        1 -> return MENU_DEFINIR_TABULEIRO
        2,3,4 -> {
            println("!!! POR IMPLEMENTAR, tente novamente")
            return MENU_PRINCIPAL
        }
        -1 -> return MENU_PRINCIPAL
        0 -> return SAIR
    }
    println()
    return menuEscolhido
}


fun menuDefinirTabuleiro(): Int {
    println()
    println("""> > Batalha Naval < <
        |
        |Defina o tamanho do tabuleiro:
    """.trimMargin())
    var linhas: Int?
    var colunas: Int?

    do {

        do {
            println("Quantas linhas?")
            linhas = readln().toIntOrNull()

            when (linhas) {
                null -> println("!!! Número de linhas invalidas, tente novamente")
                -1 -> return MENU_PRINCIPAL
                0 -> return SAIR
            }
        } while (linhas == null)

        do {
            println("Quantas colunas?")
            colunas = readln().toIntOrNull()

            when (colunas) {
                null -> println("!!! Número de linhas invalidas, tente novamente")
                -1 -> return MENU_PRINCIPAL
                0 -> return SAIR
            }
        } while (colunas == null)

    } while (!tamanhoTabuleiroValido(linhas, colunas))

    if (linhas != null && colunas != null) {
        println(criaTerreno(linhas, colunas))

        println("""Insira as coordenadas do navio:
            |Coordenadas? (ex: 6,G)
        """.trimMargin())
        var coordenadas: String? = null
        do {
            coordenadas = readlnOrNull()
            if (coordenadas != null && coordenadas != "") { //da erro antes de entrar na fun
                if (coordenadas.toIntOrNull() == -1) return MENU_PRINCIPAL
                if (coordenadas.toIntOrNull() == 0) return SAIR
            }
        } while (!processaCoordenadas(coordenadas, linhas, colunas))
    }

    println("""Insira a orientacao do navio:
        |Orientacao? (N, S, E, O)
    """.trimMargin())


    do {
        val orientacao: String? = readlnOrNull()
        if (orientacao == null) {
            println("""!!! Orientacao invalida, tente novamente
                |Orientacao? (N, S, E, O)
            """.trimMargin())
        } else if (orientacao.toInt() == -1) return MENU_PRINCIPAL
        if (orientacao == "N" || orientacao == "S" || orientacao == "E" || orientacao == "O") return MENU_PRINCIPAL
    } while (orientacao == null)
    return SAIR
}


fun menuDefinirNavios(): Int {
    return MENU_PRINCIPAL

}

fun menuJogar(): Int {
    return MENU_PRINCIPAL
}

fun menuLerFicheiro(): Int {
    return MENU_PRINCIPAL
}

fun menuGravarFicheiro(): Int {
    return MENU_PRINCIPAL
}


fun tamanhoTabuleiroValido(numLinhas: Int?, numColunas: Int?): Boolean {
    return when {
        numColunas == 5 && numLinhas == 5 -> true
        numColunas == 7 && numLinhas == 7 -> true
        numColunas == 8 && numLinhas == 8 -> true
        numColunas == 10 && numLinhas == 10 -> true
        else -> false
    }
}


fun processaCoordenadas(coordenadas: String?, numLinhas: Int, numColunas: Int): Boolean {


    if (coordenadas == null || coordenadas.length < 3 || coordenadas.length > 4) {
        println("""!!! Coordenadas invalidas, tente novamente
            |Coordenadas? (ex: 6,G)
        """.trimMargin())
        return false
    } else {

        val colunaCode = coordenadas[coordenadas.length - 1].code
        var linha = coordenadas[0].toString().toInt()

        if (coordenadas.length == 3 && coordenadas[1] == ',' && colunaCode in 65..90) {
            return when {
                linha == 0 -> false
                linha <= numLinhas && colunaCode <= numColunas + 64 -> true
                else -> {
                    println("""!!! Coordenadas invalidas, tente novamente
            |Coordenadas? (ex: 6,G)
        """.trimMargin())
                    false
                }
            }
        }
        if (coordenadas.length == 4 && coordenadas[2] == ',' && colunaCode in 65..90) {

            linha = (coordenadas[0].toString() + coordenadas[1].toString()).toInt()

            return when {
                linha == 0 -> false
                linha <= numLinhas && colunaCode <= numColunas + 64 -> true
                else -> false
            }
        }
        return false
    }
}


fun criaLegendaHorizontal(numColunas: Int): String {
    var count = 0
    var codigoAsciiLetra = 65
    var legendaHorizontal = ""
    while (count < numColunas) {
        legendaHorizontal += if (count == numColunas - 1) {
            "${codigoAsciiLetra.toChar()}"
        } else {
            "${codigoAsciiLetra.toChar()} | "
        }
        count++
        codigoAsciiLetra++
    }
    return legendaHorizontal
}

fun criaTerreno(numLinhas: Int, numColunas: Int): String {
    var linha = 0
    var terreno = ""
    terreno += "\n| "
    terreno += (criaLegendaHorizontal(numColunas))
    terreno += " |\n"
    while (linha < numLinhas) {
        var coluna = 0
        while (coluna < numColunas) {
            terreno += "|   "

            if (coluna == numColunas - 1) {
                terreno += "| ${linha + 1}"
            }
            coluna++
        }
        terreno += "\n"
        linha++
    }
    return terreno
}


fun main() {
    var menuAtual = MENU_PRINCIPAL
    while (true) {
        menuAtual = when (menuAtual) {
            MENU_PRINCIPAL -> menuPrincipal()
            MENU_DEFINIR_TABULEIRO -> menuDefinirTabuleiro()
            MENU_DEFINIR_NAVIOS -> menuDefinirNavios()
            MENU_JOGAR -> menuJogar()
            MENU_LER_FICHEIRO -> menuLerFicheiro()
            MENU_GRAVAR_FICHEIRO -> menuGravarFicheiro()
            SAIR -> return
            else -> return
        }
    }

}
